/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package pintodbsimulation;

import java.awt.Image;
import java.awt.event.KeyEvent;
import java.io.File;
import java.io.IOException;
import java.nio.charset.Charset;
import java.nio.file.FileSystems;
import java.nio.file.Files;
import java.util.Arrays;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;

/**
 *
 * @author pablo
 */
public class MainForm extends javax.swing.JFrame {

    /**
     * Creates new form MainForm
     */
    public MainForm() {
        stopSimulation = false;
        sleepMode = true;
        showConsole = true;
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        panelParameters = new javax.swing.JPanel();
        l_k = new javax.swing.JLabel();
        l_m = new javax.swing.JLabel();
        l_n = new javax.swing.JLabel();
        l_p = new javax.swing.JLabel();
        l_t = new javax.swing.JLabel();
        l_timesToRun = new javax.swing.JLabel();
        l_maxTimeToRun = new javax.swing.JLabel();
        txt_k = new javax.swing.JTextField();
        txt_t = new javax.swing.JTextField();
        txt_m = new javax.swing.JTextField();
        txt_n = new javax.swing.JTextField();
        txt_p = new javax.swing.JTextField();
        txt_MaxTimeToRunSim = new javax.swing.JTextField();
        txt_timesToRunSim = new javax.swing.JTextField();
        btnStop = new javax.swing.JButton();
        btnRun = new javax.swing.JButton();
        chkDelayMode = new javax.swing.JCheckBox();
        chkShowOuput = new javax.swing.JCheckBox();
        panelClockTime = new javax.swing.JPanel();
        txtClockTime = new javax.swing.JTextField();
        panelDeniedConnections = new javax.swing.JPanel();
        txtDeniendConnections = new javax.swing.JTextField();
        panelQueueSizes = new javax.swing.JPanel();
        l_connectionM = new javax.swing.JLabel();
        l_procManagMod = new javax.swing.JLabel();
        l_transacMod = new javax.swing.JLabel();
        l_queryProcMod = new javax.swing.JLabel();
        l_execMod = new javax.swing.JLabel();
        txtTransacMod = new javax.swing.JTextField();
        jTextField2 = new javax.swing.JTextField();
        txtProMgmtcModule = new javax.swing.JTextField();
        txtQueryProcMod = new javax.swing.JTextField();
        txtExecMod = new javax.swing.JTextField();
        tabPanelFinalStats = new javax.swing.JTabbedPane();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtConsoleArea = new javax.swing.JTextArea();
        jPanel3 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        txtIterarionStats = new javax.swing.JTextArea();
        jPanel6 = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        txtFinalIterarionStats = new javax.swing.JTextArea();
        menuBarMain = new javax.swing.JMenuBar();
        menuPintoDB = new javax.swing.JMenu();
        menuItemExit = new javax.swing.JMenuItem();
        menuExportData = new javax.swing.JMenu();
        menuItemExpOutput = new javax.swing.JMenuItem();
        menuItemExpIterStats = new javax.swing.JMenuItem();
        menuItemExpFinalStats = new javax.swing.JMenuItem();
        menuHelp = new javax.swing.JMenu();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("PintoDB System Simulation");
        setName("panel1"); // NOI18N
        setResizable(false);

        panelParameters.setBackground(new java.awt.Color(204, 204, 255));
        panelParameters.setBorder(javax.swing.BorderFactory.createTitledBorder("Parameters"));

        l_k.setText("k:");

        l_m.setText("n:");

        l_n.setText("m:");

        l_p.setText("p:");

        l_t.setText("t:");

        l_timesToRun.setText("Times to run simulation:");

        l_maxTimeToRun.setText("Max time to run simulation:");

        txt_k.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        txt_k.setText("1");
        txt_k.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txt_kKeyTyped(evt);
            }
        });

        txt_t.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        txt_t.setText("15");
        txt_t.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txt_tKeyTyped(evt);
            }
        });

        txt_m.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        txt_m.setText("1");
        txt_m.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txt_mKeyTyped(evt);
            }
        });

        txt_n.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        txt_n.setText("1");
        txt_n.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txt_nKeyTyped(evt);
            }
        });

        txt_p.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        txt_p.setText("1");
        txt_p.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txt_pKeyTyped(evt);
            }
        });

        txt_MaxTimeToRunSim.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        txt_MaxTimeToRunSim.setText("15");
        txt_MaxTimeToRunSim.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txt_MaxTimeToRunSimKeyTyped(evt);
            }
        });

        txt_timesToRunSim.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        txt_timesToRunSim.setText("1");
        txt_timesToRunSim.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txt_timesToRunSimKeyTyped(evt);
            }
        });

        btnStop.setBackground(new java.awt.Color(255, 153, 153));
        btnStop.setText("Stop");
        btnStop.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnStop.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnStopActionPerformed(evt);
            }
        });

        btnRun.setBackground(new java.awt.Color(153, 255, 153));
        btnRun.setText("Run");
        btnRun.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnRun.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRunActionPerformed(evt);
            }
        });

        chkDelayMode.setSelected(true);
        chkDelayMode.setText("Delay mode");
        chkDelayMode.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chkDelayModeActionPerformed(evt);
            }
        });

        chkShowOuput.setSelected(true);
        chkShowOuput.setText("Show output");
        chkShowOuput.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chkShowOuputActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout panelParametersLayout = new javax.swing.GroupLayout(panelParameters);
        panelParameters.setLayout(panelParametersLayout);
        panelParametersLayout.setHorizontalGroup(
            panelParametersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelParametersLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelParametersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(l_timesToRun, javax.swing.GroupLayout.PREFERRED_SIZE, 141, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(panelParametersLayout.createSequentialGroup()
                        .addComponent(l_p, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(txt_p))
                    .addGroup(panelParametersLayout.createSequentialGroup()
                        .addComponent(l_maxTimeToRun)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txt_MaxTimeToRunSim, javax.swing.GroupLayout.DEFAULT_SIZE, 111, Short.MAX_VALUE))
                    .addGroup(panelParametersLayout.createSequentialGroup()
                        .addGroup(panelParametersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(l_n, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 32, Short.MAX_VALUE)
                            .addComponent(l_k, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(l_m, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(l_t, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(3, 3, 3)
                        .addGroup(panelParametersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txt_m, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(txt_n)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelParametersLayout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addComponent(txt_timesToRunSim, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(txt_k)
                            .addComponent(txt_t)))
                    .addGroup(panelParametersLayout.createSequentialGroup()
                        .addComponent(btnRun)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnStop))
                    .addGroup(panelParametersLayout.createSequentialGroup()
                        .addComponent(chkDelayMode)
                        .addGap(18, 18, 18)
                        .addComponent(chkShowOuput)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        panelParametersLayout.setVerticalGroup(
            panelParametersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelParametersLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelParametersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(l_k)
                    .addComponent(txt_k, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(panelParametersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panelParametersLayout.createSequentialGroup()
                        .addComponent(l_n)
                        .addGap(12, 12, 12))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelParametersLayout.createSequentialGroup()
                        .addComponent(txt_m, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)))
                .addGroup(panelParametersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(l_m)
                    .addComponent(txt_n))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(panelParametersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(l_p)
                    .addComponent(txt_p, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(panelParametersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(l_t)
                    .addComponent(txt_t))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panelParametersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(l_timesToRun)
                    .addComponent(txt_timesToRunSim))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panelParametersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(l_maxTimeToRun)
                    .addComponent(txt_MaxTimeToRunSim))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panelParametersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(chkDelayMode, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(chkShowOuput))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(panelParametersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnRun)
                    .addComponent(btnStop))
                .addGap(25, 25, 25))
        );

        panelClockTime.setBorder(javax.swing.BorderFactory.createTitledBorder("Clock time ( seconds )"));

        txtClockTime.setEditable(false);
        txtClockTime.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        txtClockTime.setText("0.0");

        javax.swing.GroupLayout panelClockTimeLayout = new javax.swing.GroupLayout(panelClockTime);
        panelClockTime.setLayout(panelClockTimeLayout);
        panelClockTimeLayout.setHorizontalGroup(
            panelClockTimeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelClockTimeLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(txtClockTime, javax.swing.GroupLayout.DEFAULT_SIZE, 229, Short.MAX_VALUE)
                .addContainerGap())
        );
        panelClockTimeLayout.setVerticalGroup(
            panelClockTimeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelClockTimeLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(txtClockTime, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(18, Short.MAX_VALUE))
        );

        panelDeniedConnections.setBorder(javax.swing.BorderFactory.createTitledBorder("Deniend connections"));

        txtDeniendConnections.setEditable(false);
        txtDeniendConnections.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        txtDeniendConnections.setText("0");

        javax.swing.GroupLayout panelDeniedConnectionsLayout = new javax.swing.GroupLayout(panelDeniedConnections);
        panelDeniedConnections.setLayout(panelDeniedConnectionsLayout);
        panelDeniedConnectionsLayout.setHorizontalGroup(
            panelDeniedConnectionsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelDeniedConnectionsLayout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addComponent(txtDeniendConnections)
                .addContainerGap())
        );
        panelDeniedConnectionsLayout.setVerticalGroup(
            panelDeniedConnectionsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelDeniedConnectionsLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(txtDeniendConnections, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(18, Short.MAX_VALUE))
        );

        panelQueueSizes.setBorder(javax.swing.BorderFactory.createTitledBorder("Queue sizes per module"));

        l_connectionM.setText("Connection Module:");

        l_procManagMod.setText("Process Management Module:");

        l_transacMod.setText("Transaction And Disk Module:");

        l_queryProcMod.setText("Query Processor Module:");

        l_execMod.setText("Execution Module:");

        txtTransacMod.setEditable(false);
        txtTransacMod.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        txtTransacMod.setText("0");

        jTextField2.setEditable(false);
        jTextField2.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        jTextField2.setText("0");

        txtProMgmtcModule.setEditable(false);
        txtProMgmtcModule.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        txtProMgmtcModule.setText("0");

        txtQueryProcMod.setEditable(false);
        txtQueryProcMod.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        txtQueryProcMod.setText("0");

        txtExecMod.setEditable(false);
        txtExecMod.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        txtExecMod.setText("0");

        javax.swing.GroupLayout panelQueueSizesLayout = new javax.swing.GroupLayout(panelQueueSizes);
        panelQueueSizes.setLayout(panelQueueSizesLayout);
        panelQueueSizesLayout.setHorizontalGroup(
            panelQueueSizesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelQueueSizesLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelQueueSizesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelQueueSizesLayout.createSequentialGroup()
                        .addComponent(l_transacMod, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtTransacMod, javax.swing.GroupLayout.PREFERRED_SIZE, 500, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelQueueSizesLayout.createSequentialGroup()
                        .addComponent(l_connectionM, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, 555, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelQueueSizesLayout.createSequentialGroup()
                        .addGroup(panelQueueSizesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(l_queryProcMod, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(l_procManagMod, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(panelQueueSizesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(txtQueryProcMod, javax.swing.GroupLayout.DEFAULT_SIZE, 491, Short.MAX_VALUE)
                            .addComponent(txtProMgmtcModule)))
                    .addGroup(panelQueueSizesLayout.createSequentialGroup()
                        .addComponent(l_execMod, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(12, 12, 12)
                        .addComponent(txtExecMod, javax.swing.GroupLayout.PREFERRED_SIZE, 560, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        panelQueueSizesLayout.setVerticalGroup(
            panelQueueSizesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelQueueSizesLayout.createSequentialGroup()
                .addGap(6, 6, 6)
                .addGroup(panelQueueSizesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(l_connectionM)
                    .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(panelQueueSizesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(l_procManagMod)
                    .addComponent(txtProMgmtcModule, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(panelQueueSizesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(l_queryProcMod)
                    .addComponent(txtQueryProcMod, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(panelQueueSizesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(l_transacMod)
                    .addComponent(txtTransacMod, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(panelQueueSizesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(l_execMod)
                    .addComponent(txtExecMod))
                .addContainerGap(23, Short.MAX_VALUE))
        );

        txtConsoleArea.setEditable(false);
        txtConsoleArea.setBackground(new java.awt.Color(51, 51, 51));
        txtConsoleArea.setColumns(20);
        txtConsoleArea.setForeground(new java.awt.Color(255, 255, 255));
        txtConsoleArea.setRows(5);
        txtConsoleArea.setCursor(new java.awt.Cursor(java.awt.Cursor.TEXT_CURSOR));
        jScrollPane1.setViewportView(txtConsoleArea);

        tabPanelFinalStats.addTab("Output", jScrollPane1);

        jPanel3.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(153, 153, 255), 2));

        txtIterarionStats.setBackground(new java.awt.Color(51, 51, 51));
        txtIterarionStats.setColumns(20);
        txtIterarionStats.setForeground(new java.awt.Color(255, 255, 255));
        txtIterarionStats.setRows(5);
        jScrollPane2.setViewportView(txtIterarionStats);

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 989, Short.MAX_VALUE)
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 197, Short.MAX_VALUE)
        );

        tabPanelFinalStats.addTab("Iteration statistics", jPanel3);

        txtFinalIterarionStats.setBackground(new java.awt.Color(51, 51, 51));
        txtFinalIterarionStats.setColumns(20);
        txtFinalIterarionStats.setForeground(new java.awt.Color(255, 255, 255));
        txtFinalIterarionStats.setRows(5);
        jScrollPane3.setViewportView(txtFinalIterarionStats);

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 993, Short.MAX_VALUE)
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 201, Short.MAX_VALUE)
        );

        tabPanelFinalStats.addTab("Final iteration statistics", jPanel6);

        menuBarMain.setBackground(new java.awt.Color(0, 51, 51));
        menuBarMain.setOpaque(false);

        menuPintoDB.setText("PintoDB");

        menuItemExit.setText("Exit");
        menuItemExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuItemExitActionPerformed(evt);
            }
        });
        menuPintoDB.add(menuItemExit);

        menuBarMain.add(menuPintoDB);

        menuExportData.setText("Export data");

        menuItemExpOutput.setText("Export output");
        menuItemExpOutput.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuItemExpOutputActionPerformed(evt);
            }
        });
        menuExportData.add(menuItemExpOutput);

        menuItemExpIterStats.setText("Export iteration stats");
        menuItemExpIterStats.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuItemExpIterStatsActionPerformed(evt);
            }
        });
        menuExportData.add(menuItemExpIterStats);

        menuItemExpFinalStats.setText("Export final stats");
        menuItemExpFinalStats.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuItemExpFinalStatsActionPerformed(evt);
            }
        });
        menuExportData.add(menuItemExpFinalStats);

        menuBarMain.add(menuExportData);

        menuHelp.setText("Help");
        menuBarMain.add(menuHelp);

        setJMenuBar(menuBarMain);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(tabPanelFinalStats)
                        .addContainerGap())
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(panelParameters, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(panelClockTime, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(panelDeniedConnections, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(panelQueueSizes, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addContainerGap())))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(panelDeniedConnections, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(panelClockTime, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(panelQueueSizes, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(panelParameters, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(tabPanelFinalStats, javax.swing.GroupLayout.PREFERRED_SIZE, 227, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     *
     * @param evt
     */
    private void txt_MaxTimeToRunSimKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txt_MaxTimeToRunSimKeyTyped
        if ((txt_MaxTimeToRunSim.getText()).length() > MAX_LENGHT) {
            evt.consume();
        }
    }//GEN-LAST:event_txt_MaxTimeToRunSimKeyTyped
    /**
     *
     * @param evt
     */
    private void txt_timesToRunSimKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txt_timesToRunSimKeyTyped
        if ((txt_timesToRunSim.getText()).length() <= MAX_LENGHT) {
            controlJustNumber(evt);
        } else {
            evt.consume();
        }
    }//GEN-LAST:event_txt_timesToRunSimKeyTyped
    /**
     *
     * @param evt
     */
    private void txt_tKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txt_tKeyTyped
        if ((txt_t.getText()).length() > MAX_LENGHT) {
            evt.consume();
        }
    }//GEN-LAST:event_txt_tKeyTyped
    /**
     *
     * @param evt
     */
    private void txt_pKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txt_pKeyTyped
        if ((txt_p.getText()).length() <= MAX_LENGHT) {
            controlJustNumber(evt);
        } else {
            evt.consume();
        }
    }//GEN-LAST:event_txt_pKeyTyped
    /**
     *
     * @param evt
     */
    private void txt_nKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txt_nKeyTyped
        if ((txt_n.getText()).length() <= MAX_LENGHT) {
            controlJustNumber(evt);
        } else {
            evt.consume();
        }
    }//GEN-LAST:event_txt_nKeyTyped

    /**
     *
     * @param evt
     */
    private void controlJustNumber(java.awt.event.KeyEvent evt) {
        char c = evt.getKeyChar();
        if (!((c >= '0') && (c <= '9')
                || (c == KeyEvent.VK_BACK_SPACE)
                || (c == KeyEvent.VK_DELETE))) {
            getToolkit().beep();
            evt.consume();
        }
    }

    /**
     *
     * @return
     */
    private boolean validateData() {
        int k, p, m, n, timesToRunSim;
        double t, maxSimTime;

        k = Integer.parseInt(txt_k.getText());
        if (k <= 0) {
            JOptionPane.showMessageDialog(this,
                    "Parameter k must be positive and greater than zero",
                    "Error",
                    JOptionPane.ERROR_MESSAGE);
            this.txt_k.requestFocus();
            return false;
        }
        m = Integer.parseInt(txt_m.getText());
        if (m <= 0) {
            JOptionPane.showMessageDialog(this,
                    "Parameter m must be positive and greater than zero",
                    "Error",
                    JOptionPane.ERROR_MESSAGE);
            this.txt_m.requestFocus();
            return false;
        }
        n = Integer.parseInt(txt_n.getText());
        if (n <= 0) {
            JOptionPane.showMessageDialog(this,
                    "Parameter n must be positive and greater than zero",
                    "Error",
                    JOptionPane.ERROR_MESSAGE);
            this.txt_n.requestFocus();
            return false;
        }
        p = Integer.parseInt(txt_p.getText());
        if (p <= 0) {
            JOptionPane.showMessageDialog(this,
                    "Parameter p must be positive and greater than zero",
                    "Error",
                    JOptionPane.ERROR_MESSAGE);
            this.txt_p.requestFocus();
            return false;
        }
        timesToRunSim = Integer.parseInt(txt_timesToRunSim.getText());
        if (timesToRunSim <= 0) {
            JOptionPane.showMessageDialog(this,
                    "Parameter timesToRunSim must be positive and greater than zero",
                    "Error",
                    JOptionPane.ERROR_MESSAGE);
            this.txt_timesToRunSim.requestFocus();
            return false;
        }
        try {
            t = Double.parseDouble(txt_t.getText());
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this,
                    "Error input in parameter timeout time ( t )",
                    "Error",
                    JOptionPane.ERROR_MESSAGE);
            this.txt_t.requestFocus();
            return false;
        }

        try {
            maxSimTime = Double.parseDouble(txt_MaxTimeToRunSim.getText());
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this,
                    "Error input in parameter max time to run simulation ",
                    "Error",
                    JOptionPane.ERROR_MESSAGE);
            this.txt_MaxTimeToRunSim.requestFocus();
            return false;
        }
        this.pintoDB.setSimParams(k, m, n, p, timesToRunSim, maxSimTime, t);
        return true;
    }

    /**
     *
     * @param newContent
     */
    public void refreshConsoleAreaContent(String newContent) {
        if (showConsole) {
            this.txtConsoleArea.append(newContent);
            this.txtConsoleArea.append("\n");
            this.txtConsoleArea.setCaretPosition(txtConsoleArea.getDocument().getLength());
        } else {
            this.txtConsoleArea.setText("");
        }
    }

    /**
     *
     * @param pM
     * @param qM
     * @param tM
     * @param eM
     */
    public void refresQueueSizesPerModule(int pM, int qM, int tM, int eM) {
        this.txtProMgmtcModule.setText(String.valueOf(pM));
        this.txtQueryProcMod.setText(String.valueOf(qM));
        this.txtTransacMod.setText(String.valueOf(tM));
        this.txtExecMod.setText(String.valueOf(eM));
    }

    /**
     *
     * @param time
     */
    public void refreshClockTime(double time) {
        this.txtClockTime.setText(String.valueOf(time));
    }

    /**
     *
     * @param count
     */
    public void refreshDeniendConnection(int count) {
        this.txtDeniendConnections.setText(String.valueOf(count));
    }

    /**
     *
     * @param action
     */
    public void activeTextFiles(boolean action) {
        this.menuItemExpFinalStats.setEnabled(action);
        this.menuItemExpIterStats.setEnabled(action);
        this.menuItemExpOutput.setEnabled(action);
        this.txt_k.setEnabled(action);
        this.txt_n.setEnabled(action);
        this.txt_m.setEnabled(action);
        this.txt_p.setEnabled(action);
        this.txt_t.setEnabled(action);
        this.txt_MaxTimeToRunSim.setEnabled(action);
        this.txt_timesToRunSim.setEnabled(action);
    }

    /**
     *
     * @param newContent
     */
    public void refreshIterationStats(String newContent) {
        this.txtIterarionStats.append(newContent);
        this.txtIterarionStats.setCaretPosition(txtIterarionStats.getDocument().getLength());
    }

    /**
     *
     * @param newContent
     */
    public void refreshFinalIterationStats(String newContent) {
        String oldContent = this.txtFinalIterarionStats.getText();
        this.txtFinalIterarionStats.setText(oldContent + newContent);
    }

    /**
     *
     * @param content
     * @throws java.io.IOException
     */
    public void saveInterfaceData(String content) throws IOException {

        JFileChooser fileToSave = new JFileChooser();
        if (fileToSave.showSaveDialog(this) == JFileChooser.APPROVE_OPTION) {
            List<String> lines = Arrays.asList(content);
            File newFile = fileToSave.getSelectedFile();
            Files.write(newFile.toPath(), lines, Charset.forName("UTF-8"));
        }
    }

    /**
     *
     * @param evt
     */
    private void btnRunActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRunActionPerformed
        if (validateData()) {
            // clear data
            this.txtConsoleArea.setText("");
            this.txtClockTime.setText("");
            this.txtDeniendConnections.setText("");
            this.txtProMgmtcModule.setText("");
            this.txtQueryProcMod.setText("");
            this.txtExecMod.setText("");
            this.txtTransacMod.setText("");
            this.txtFinalIterarionStats.setText("");
            this.txtIterarionStats.setText("");
            //run simulation
            stopSimulation = false;
            activeTextFiles(false);
            if (this.pintoDB == null) {
                this.pintoDB = new SimPintoDB(this);
            }
            this.pintoDB.start();
            activeRunButton(false);
        }
        this.pintoDB = new SimPintoDB(this);
    }//GEN-LAST:event_btnRunActionPerformed

    /**
     *
     * @param cond
     */
    public void activeRunButton(boolean cond) {
        this.btnRun.setEnabled(cond);
    }

    private void btnStopActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnStopActionPerformed
        activeTextFiles(true);
        stopSimulation = true;
    }//GEN-LAST:event_btnStopActionPerformed

    private void txt_mKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txt_mKeyTyped
        if ((txt_m.getText()).length() <= MAX_LENGHT) {
            controlJustNumber(evt);
        } else {
            evt.consume();
        }
    }//GEN-LAST:event_txt_mKeyTyped

    private void txt_kKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txt_kKeyTyped
        if ((txt_k.getText()).length() <= MAX_LENGHT) {
            controlJustNumber(evt);
        } else {
            evt.consume();
        }
    }//GEN-LAST:event_txt_kKeyTyped

    private void chkDelayModeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chkDelayModeActionPerformed
        this.sleepMode = chkDelayMode.isSelected();
    }//GEN-LAST:event_chkDelayModeActionPerformed

    private void chkShowOuputActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chkShowOuputActionPerformed
        this.showConsole = chkShowOuput.isSelected();
    }//GEN-LAST:event_chkShowOuputActionPerformed

    private void menuItemExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuItemExitActionPerformed
        this.dispose();
    }//GEN-LAST:event_menuItemExitActionPerformed

    private void menuItemExpOutputActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuItemExpOutputActionPerformed
        try {
            saveInterfaceData(this.txtConsoleArea.getText());
        } catch (IOException ex) {
            Logger.getLogger(MainForm.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_menuItemExpOutputActionPerformed

    private void menuItemExpIterStatsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuItemExpIterStatsActionPerformed
        try {
            saveInterfaceData(this.txtIterarionStats.getText());
        } catch (IOException ex) {
            Logger.getLogger(MainForm.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_menuItemExpIterStatsActionPerformed

    private void menuItemExpFinalStatsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuItemExpFinalStatsActionPerformed
        try {
            saveInterfaceData(this.txtFinalIterarionStats.getText());
        } catch (IOException ex) {
            Logger.getLogger(MainForm.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_menuItemExpFinalStatsActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */

        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                MainForm m = new MainForm();
                m.setLocationRelativeTo(null);
                m.setVisible(true);
                ImageIcon img = new ImageIcon("resources/database.png");
                m.setIconImage(img.getImage());
                m.pintoDB = new SimPintoDB(m);
            }
        });

    }

    private final int MAX_LENGHT = 4;
    private boolean showConsole;

    /**
     *
     */
    public SimPintoDB pintoDB;

    /**
     *
     */
    public volatile boolean stopSimulation;

    /**
     *
     */
    public volatile boolean sleepMode;
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnRun;
    private javax.swing.JButton btnStop;
    private javax.swing.JCheckBox chkDelayMode;
    private javax.swing.JCheckBox chkShowOuput;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTextField jTextField2;
    private javax.swing.JLabel l_connectionM;
    private javax.swing.JLabel l_execMod;
    private javax.swing.JLabel l_k;
    private javax.swing.JLabel l_m;
    private javax.swing.JLabel l_maxTimeToRun;
    private javax.swing.JLabel l_n;
    private javax.swing.JLabel l_p;
    private javax.swing.JLabel l_procManagMod;
    private javax.swing.JLabel l_queryProcMod;
    private javax.swing.JLabel l_t;
    private javax.swing.JLabel l_timesToRun;
    private javax.swing.JLabel l_transacMod;
    private javax.swing.JMenuBar menuBarMain;
    private javax.swing.JMenu menuExportData;
    private javax.swing.JMenu menuHelp;
    private javax.swing.JMenuItem menuItemExit;
    private javax.swing.JMenuItem menuItemExpFinalStats;
    private javax.swing.JMenuItem menuItemExpIterStats;
    private javax.swing.JMenuItem menuItemExpOutput;
    private javax.swing.JMenu menuPintoDB;
    private javax.swing.JPanel panelClockTime;
    private javax.swing.JPanel panelDeniedConnections;
    private javax.swing.JPanel panelParameters;
    private javax.swing.JPanel panelQueueSizes;
    private javax.swing.JTabbedPane tabPanelFinalStats;
    private javax.swing.JTextField txtClockTime;
    private javax.swing.JTextArea txtConsoleArea;
    private javax.swing.JTextField txtDeniendConnections;
    private javax.swing.JTextField txtExecMod;
    private javax.swing.JTextArea txtFinalIterarionStats;
    private javax.swing.JTextArea txtIterarionStats;
    private javax.swing.JTextField txtProMgmtcModule;
    private javax.swing.JTextField txtQueryProcMod;
    private javax.swing.JTextField txtTransacMod;
    private javax.swing.JTextField txt_MaxTimeToRunSim;
    private javax.swing.JTextField txt_k;
    private javax.swing.JTextField txt_m;
    private javax.swing.JTextField txt_n;
    private javax.swing.JTextField txt_p;
    private javax.swing.JTextField txt_t;
    private javax.swing.JTextField txt_timesToRunSim;
    // End of variables declaration//GEN-END:variables
}
